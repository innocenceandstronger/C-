源程序：
1.game.h
#define _CRT_SECURE_NO_WARNINGS 1//头文件
#include<time.h>
#include<stdlib.h>
#include<stdio.h>
#include<windows.h>
#include<string.h>
#ifndef __GAME_H__
#define __GAME_H__
#define ROWS 3//行
#define COLS 3//列
enum CH
{
	PLAY = 1,
	EXIT = 0
};
void init_board(char board[ROWS][COLS], int rows, int cols);//定义数组
void printf_board(char board[ROWS][COLS], int rows, int cols);//打印棋盘
void menu();//显示菜单
void player_move(char board[ROWS][COLS]);//玩家下棋
void computer_move(char board[ROWS][COLS]); //电脑下棋
char check_win(char board[ROWS][COLS]);//判断输赢
#endif


2.text.c
#define _CRT_SECURE_NO_WARNINGS 1//主体部分

#include"game.h"
void play_game(char board[ROWS][COLS])
{

	while (1)
	{
		player_move(board);//玩家下棋
		if (check_win(board) == 'p')//判断输赢
		{
			break;
		}
		printf_board(board, ROWS, COLS);
		printf("*****   电脑下棋  ******\n");

		computer_move(board);//电脑下棋
		if (check_win(board) == 'c')//判断输赢
		{
			break;
		}
		Sleep(1000);
		printf_board(board, ROWS, COLS);
	}
	printf("*************************\n");

	if (check_win(board) == 'p')
	{
		printf("玩家获胜！\n");
	}
	else
	{
		printf("电脑获胜！\n");
	}
	printf_board(board, ROWS, COLS);
	printf("\n");
	memset(board, ' ', ROWS*COLS*sizeof(char));

}

void menu()//界面
{
	printf("****************************\n");
	printf("*******   0.exit    ********\n");
	printf("*******   1.play    ********\n");
	printf("****************************\n");
}

void game()//游戏函数
{
	int input = 1;
	char board[ROWS][COLS] = { 0 };
	init_board(board, ROWS, COLS);
	//printf_board(board, ROWS, COLS);
	srand((unsigned)time(NULL));//产生随机数

	menu();//显示菜单
	printf("请选择:");
	scanf("%d", &input);
	while (input)
	{
		switch (input)
		{
		case PLAY:
			play_game(board);
			break;
		case EXIT:
			break;
		}
		menu();
		printf("请选择:");
		scanf("%d", &input);
	}


}
int main()
{
	game();
	system("pause");
	return 0;

}


3.game.c
#define _CRT_SECURE_NO_WARNINGS 1//执行部分
#include "game.h"
void init_board(char board[ROWS][COLS], int rows, int cols)//初始化棋盘
{
	int i = 0;
	int j = 0;
	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{
			board[i][j] = ' ';
		}
	}
}
void printf_board(char board[ROWS][COLS], int rows, int cols)//打印棋盘
{
	int i = 0;
	for (i = 0; i < ROWS; i++)
	{
		printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
		if (i != 2)
			printf("---|---|--- \n");
	}
}
void player_move(char board[ROWS][COLS])//玩家下棋
{
	int x = 0;
	int y = 0;
	while (1)
	{
		printf("请输入坐标:");
		scanf("%d%d", &x, &y);
		if ((x > 0 && x <= 3) && (y > 0 && y <= 3))//判断坐标是否合法
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = 'X';
				break;
			}
			else
			{
				printf("坐标被占用\n");
			}

		}
		else
		{
			printf("坐标不合法\n");
		}
	}
}
void computer_move(char board[ROWS][COLS])//电脑下棋
{
	while (1)
	{
		int x = rand() % 3;
		int y = rand() % 3;
		if (board[x][y] == ' ')
		{
			board[x][y] = '0';
			break;
		}
	}
}
char check_win(char board[ROWS][COLS])//判断输赢
{
	//判断玩家获胜
	for (int i = 0; i < ROWS; i++)
	{
		if (((board[i][0] == board[i][1])) && ((board[i][1]) == (board[i][2])) && (board[i][0] == 'X'))
			return 'p';
	}
	for (int i = 0; i < COLS; i++)
	{
		if (((board[0][i] == board[1][i])) && ((board[1][i]) == (board[2][i])) && (board[0][i] == 'X'))
			return 'p';
	}
	if (((board[0][0] == board[1][1]) && (board[1][1] == board[2][2])) && (board[2][2] == 'X'))
	{
		return 'p';
	}
	if (((board[0][2] == board[1][1]) && (board[1][1] == board[2][0])) && (board[1][1] == 'X'))
	{
		return 'p';
	}
	//判断电脑获胜
	for (int i = 0; i < ROWS; i++)
	{
		if (((board[i][0] == board[i][1])) && ((board[i][1]) == (board[i][2])) && (board[i][0] == '0'))
			return 'c';
	}
	for (int i = 0; i < COLS; i++)
	{
		if (((board[0][i] == board[1][i])) && ((board[1][i]) == (board[2][i])) && (board[0][i] == '0'))
			return 'c';
	}
	if (((board[0][0] == board[1][1]) && (board[1][1] == board[2][2])) && (board[2][2] == '0'))
	{
		return 'c';
	}
	if (((board[0][2] == board[1][1]) && (board[1][1] == board[2][0])) && (board[1][1] == '0'))
	{
		return 'c';
	}
}
